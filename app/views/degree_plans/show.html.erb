<script>
/*global $, window*/
$.fn.editableTableWidget = function (options) {
  'use strict';
  return $(this).each(function () {
    var buildDefaultOptions = function () {
      var opts = $.extend({}, $.fn.editableTableWidget.defaultOptions);
      opts.editor = opts.editor.clone();
      return opts;
    },
    activeOptions = $.extend(buildDefaultOptions(), options),
    ARROW_LEFT = 37, ARROW_UP = 38, ARROW_RIGHT = 39, ARROW_DOWN = 40, ENTER = 13, ESC = 27, TAB = 9,
    element = $(this),
    editor = activeOptions.editor.css('position', 'absolute').hide().appendTo(element.parent()),
    active,
    showEditor = function (select) {
      active = element.find('td:focus');
      if (active.length) {
        editor.val(active.text())
        .removeClass('error')
        .show()
        .offset(active.offset())
        .css(active.css(activeOptions.cloneProperties))
        .width(active.width())
        .height(active.height())
        .focus();
        if (select) {
          editor.select();
        }
      }
    },
    setActiveText = function () {
      var text = editor.val(),
      evt = $.Event('change'),
      originalContent;
      if (active.text() === text || editor.hasClass('error')) {
        return true;
      }
      originalContent = active.html();
      active.text(text).trigger(evt, text);
      if (evt.result === false) {
        active.html(originalContent);
      }
    },
    movement = function (element, keycode) {
      if (keycode === ARROW_RIGHT) {
        return element.next('td');
      } else if (keycode === ARROW_LEFT) {
        return element.prev('td');
      } else if (keycode === ARROW_UP) {
        return element.parent().prev().children().eq(element.index());
      } else if (keycode === ARROW_DOWN) {
        return element.parent().next().children().eq(element.index());
      }
      return [];
    };
    editor.blur(function () {
        setActiveText();
        editor.hide();
    }).keydown(function (e) {
      if (e.which === ENTER) {
        setActiveText();
        editor.hide();
        active.focus();
        e.preventDefault();
        e.stopPropagation();
      } else if (e.which === ESC) {
        editor.val(active.text());
        e.preventDefault();
        e.stopPropagation();
        editor.hide();
        active.focus();
      } else if (e.which === TAB) {
        active.focus();
      } else if (this.selectionEnd - this.selectionStart === this.value.length) {
        var possibleMove = movement(active, e.which);
        if (possibleMove.length > 0) {
          possibleMove.focus();
          e.preventDefault();
          e.stopPropagation();
        }
      }
    })
    .on('input paste', function () {
      var evt = $.Event('validate');
      active.trigger(evt, editor.val());
      if (evt.result === false) {
        editor.addClass('error');
      } else {
        editor.removeClass('error');
      }
    });
    element.on('click keypress dblclick', showEditor)
    .css('cursor', 'pointer')
    .keydown(function (e) {
      var prevent = true,
      possibleMove = movement($(e.target), e.which);
      if (possibleMove.length > 0) {
        possibleMove.focus();
      } else if (e.which === ENTER) {
        showEditor(false);
      } else if (e.which === 17 || e.which === 91 || e.which === 93) {
        showEditor(true);
        prevent = false;
      } else {
        prevent = false;
      }
      if (prevent) {
        e.stopPropagation();
        e.preventDefault();
      }
    });

    element.find('td').prop('tabindex', 1);

    $(window).on('resize', function () {
      if (editor.is(':visible')) {
        editor.offset(active.offset())
        .width(active.width())
        .height(active.height());
      }
    });
  });

};
$.fn.editableTableWidget.defaultOptions = {
  cloneProperties: ['padding', 'padding-top', 'padding-bottom', 'padding-left', 'padding-right',
                    'text-align', 'font', 'font-size', 'font-family', 'font-weight',
                    'border', 'border-top', 'border-bottom', 'border-left', 'border-right'],
  editor: $('<input>')
};
</script>
<p id="notice"><%= notice %></p>

<p>
  <strong>Department:</strong>
  <%= @degree_plan.department.name %>
</p>

<p>
  <strong>Name:</strong>
  <%= @degree_plan.name %>
</p>

<p>
  <strong>Kind:</strong>
  <%= @degree_plan.kind %>
</p>

<table class="table table-striped">
  <tbody>
  <% @degree_plan.terms.each do |term| %>
    <tr>
      <th>Term <%= term.number %></th>
      <th>Hours</th>
      <th>Minimum Grade</th>
      <th>Notes</th>
    </tr>
    <% term.term_items.each do |term_item| %>
      <tr data-term-item="<%= term_item.id %>">
        <td data-attribute="description"><%= term_item.description %></td>
        <td data-attribute="hours"><%= term_item.hours %></td>
        <td data-attribute="minimum_grade"><%= term_item.minimum_grade %></td>
        <td data-attribute="notes"><%= term_item.notes %></td>
      </tr>
    <% end %>
  <% end %>
  </tbody>
</table>

<%= bootstrap_form_for Term.new, remote: true do |f| %>
  <%= f.hidden_field :degree_plan_id, value: @degree_plan.id %>
  <%= f.number_field :number %>
  <%= f.submit %>
<% end %>

<%= link_to 'Edit', edit_degree_plan_path(@degree_plan) %> |
<%= link_to 'Back', degree_plans_path %>
<script>
$('table').editableTableWidget();
$('table td').on('change', function(evt, newValue) {
  var term_item_id = evt.currentTarget.parentElement.getAttribute('data-term-item');
  var attribute = evt.currentTarget.getAttribute('data-attribute');
  ajax_data = {};
  ajax_data[attribute] = newValue;
  console.log(newValue);
  $.ajax({
    url: "<%= term_items_path %>" + "/" + term_item_id,
    data: { term_item: ajax_data },
    method: "PUT"
  });
});
</script>
